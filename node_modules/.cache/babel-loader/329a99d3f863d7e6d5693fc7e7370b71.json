{"ast":null,"code":"export default class Light {\n  constructor(bridgeIndex, name, id, gridStates) {\n    this.bridgeIndex = bridgeIndex;\n    this.name = name;\n    this.id = id;\n    this.gridStates = gridStates;\n  }\n\n}\nexport class State {\n  constructor(hue, sat, bri, transitiontime = 0, on = true, duration = 1) {\n    this.id = new Date().getTime();\n    this.hue = Math.round(hue * 182.04166);\n    this.bri = Math.round(bri / 100 * 254);\n    this.sat = Math.round(sat / 100 * 254);\n    this.transitiontime = transitiontime;\n    this.on = on;\n    this.duration = duration;\n  }\n\n  data() {\n    return JSON.stringify({\n      hue: this.hue,\n      sat: this.sat,\n      bri: this.bri,\n      transitiontime: this.transitiontime,\n      on: this.on\n    });\n  }\n\n  set(property, value) {\n    if (property === 'hue') {\n      this.hue = Math.round(property * 182.04166);\n    } else if (property === 'sat') {\n      this.sat = Math.round(property / 100 * 254);\n    } else if (property === 'bri') {\n      this.bri = Math.round(property / 100 * 254);\n    } else {\n      console.log('Invalid property name');\n    }\n  }\n\n} // const state = {\n//     hue: Math.round(color.hue * 182.04166),\n//     bri: Math.round(color.brightness/100 * 254),\n//     sat: Math.round(color.saturation/100 * 254),\n//     transitiontime: 1,\n//     on: true\n// }","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/state-model.js"],"names":["Light","constructor","bridgeIndex","name","id","gridStates","State","hue","sat","bri","transitiontime","on","duration","Date","getTime","Math","round","data","JSON","stringify","set","property","value","console","log"],"mappings":"AAAA,eAAe,MAAMA,KAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,WAAD,EAAcC,IAAd,EAAoBC,EAApB,EAAwBC,UAAxB,EAAoC;AAC3C,SAAKH,WAAL,GAAmBA,WAAnB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;;AANsB;AAU3B,OAAO,MAAMC,KAAN,CAAY;AACfL,EAAAA,WAAW,CAACM,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,cAAc,GAAC,CAA/B,EAAkCC,EAAE,GAAC,IAArC,EAA2CC,QAAQ,GAAC,CAApD,EAAuD;AAC9D,SAAKR,EAAL,GAAW,IAAIS,IAAJ,EAAD,CAAaC,OAAb,EAAV;AACA,SAAKP,GAAL,GAAWQ,IAAI,CAACC,KAAL,CAAWT,GAAG,GAAG,SAAjB,CAAX;AACA,SAAKE,GAAL,GAAYM,IAAI,CAACC,KAAL,CAAWP,GAAG,GAAC,GAAJ,GAAU,GAArB,CAAZ;AACA,SAAKD,GAAL,GAAWO,IAAI,CAACC,KAAL,CAAWR,GAAG,GAAC,GAAJ,GAAU,GAArB,CAAX;AACA,SAAKE,cAAL,GAAsBA,cAAtB;AACA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AAEDK,EAAAA,IAAI,GAAG;AACH,WAAOC,IAAI,CAACC,SAAL,CAAe;AAClBZ,MAAAA,GAAG,EAAE,KAAKA,GADQ;AAElBC,MAAAA,GAAG,EAAE,KAAKA,GAFQ;AAGlBC,MAAAA,GAAG,EAAE,KAAKA,GAHQ;AAIlBC,MAAAA,cAAc,EAAE,KAAKA,cAJH;AAKlBC,MAAAA,EAAE,EAAE,KAAKA;AALS,KAAf,CAAP;AAOH;;AAEDS,EAAAA,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAEjB,QAAGD,QAAQ,KAAK,KAAhB,EAAuB;AACnB,WAAKd,GAAL,GAAWQ,IAAI,CAACC,KAAL,CAAWK,QAAQ,GAAG,SAAtB,CAAX;AACH,KAFD,MAEO,IAAIA,QAAQ,KAAK,KAAjB,EAAwB;AAC3B,WAAKb,GAAL,GAAWO,IAAI,CAACC,KAAL,CAAWK,QAAQ,GAAC,GAAT,GAAe,GAA1B,CAAX;AACH,KAFM,MAEA,IAAIA,QAAQ,KAAK,KAAjB,EAAwB;AAC3B,WAAKZ,GAAL,GAAYM,IAAI,CAACC,KAAL,CAAWK,QAAQ,GAAC,GAAT,GAAe,GAA1B,CAAZ;AACH,KAFM,MAEA;AACHE,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;AAEJ;;AAjCc,C,CAuCnB;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export default class Light {\n    constructor(bridgeIndex, name, id, gridStates) {\n        this.bridgeIndex = bridgeIndex;\n        this.name = name;\n        this.id = id;\n        this.gridStates = gridStates;\n    }\n}\n\n\nexport class State {\n    constructor(hue, sat, bri, transitiontime=0, on=true, duration=1) {\n        this.id = (new Date()).getTime();\n        this.hue = Math.round(hue * 182.04166);\n        this.bri =  Math.round(bri/100 * 254);\n        this.sat = Math.round(sat/100 * 254);\n        this.transitiontime = transitiontime;\n        this.on = on;\n        this.duration = duration;\n    }\n\n    data() {\n        return JSON.stringify({\n            hue: this.hue, \n            sat: this.sat,\n            bri: this.bri, \n            transitiontime: this.transitiontime,\n            on: this.on\n        })\n    }\n\n    set(property, value) {\n\n        if(property === 'hue') {\n            this.hue = Math.round(property * 182.04166);\n        } else if (property === 'sat') {\n            this.sat = Math.round(property/100 * 254);\n        } else if (property === 'bri') {\n            this.bri =  Math.round(property/100 * 254);\n        } else {\n            console.log('Invalid property name');\n        }\n\n    }\n\n\n\n}\n\n// const state = {\n//     hue: Math.round(color.hue * 182.04166),\n//     bri: Math.round(color.brightness/100 * 254),\n//     sat: Math.round(color.saturation/100 * 254),\n//     transitiontime: 1,\n//     on: true\n// }"]},"metadata":{},"sourceType":"module"}