{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { set } from './data';\nimport StateCreator from './StateCreator.jsx';\nimport './App.css';\n\nfunction App() {\n  _s();\n\n  let [lines, setLines] = useState([...set]);\n  let [creatorVisibility, setCreatorVisibility] = useState('none');\n\n  const State = props => {\n    const state = props.state;\n    const style = {\n      backgroundColor: `${state.color}`,\n      height: '100px',\n      width: `${state.length * 100}px`,\n      borderRadius: '5px'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style\n    }, state.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  };\n\n  const Grid = props => {\n    let states = props.light.gridStates;\n    return states.map((state, index) => {\n      return /*#__PURE__*/_jsxDEV(Draggable, {\n        draggableId: state.id,\n        index: index,\n        type: \"STATE\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.draggableProps,\n          ...provided.dragHandleProps,\n          className: \"draggable-state\",\n          children: /*#__PURE__*/_jsxDEV(State, {\n            state: state\n          }, state.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, `${state.id}-${props.light.name}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  const Light = props => {\n    const light = props.light;\n    const style = {\n      width: '100px',\n      height: '100px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      color: 'white'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: light.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, light.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  };\n\n  const Line = props => {\n    const style = {\n      display: 'flex',\n      borderBottom: '1px solid #2f2f2f',\n      backgroundColor: '#222'\n    };\n    const gridStyle = {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      width: '100%'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(Light, {\n        light: props.light\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: props.light.id,\n        direction: \"horizontal\",\n        type: \"STATE\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: gridStyle,\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            light: props.light\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  };\n\n  const LineStack = () => {\n    return lines.map((light, index) => {\n      return /*#__PURE__*/_jsxDEV(Draggable, {\n        draggableId: light.id,\n        index: index,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.draggableProps,\n          ...provided.dragHandleProps,\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            light: light\n          }, light.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, light.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    if (source.droppableId === \"viewer\") {\n      return;\n    }\n\n    if (result.type === \"STATE\") {\n      const newLines = [...lines];\n      const startingLine = newLines.find(light => light.id === source.droppableId);\n      const endingLine = newLines.find(light => light.id === destination.droppableId);\n      const draggedState = startingLine.gridStates.find(state => state.id === draggableId);\n      startingLine.gridStates.splice(source.index, 1);\n      endingLine.gridStates.splice(destination.index, 0, draggedState);\n      setLines([...newLines]);\n    } else if (result.type === \"LINE\") {\n      const newLines = [...lines];\n      const draggedLine = newLines.splice(source.index, 1)[0];\n      newLines.splice(destination.index, 0, draggedLine);\n      setLines([...newLines]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(StateCreator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"linestack\",\n        type: \"LINE\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [/*#__PURE__*/_jsxDEV(LineStack, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 11\n          }, this), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Bl3UUHR48P94/9voR6CJkdecqC0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/App.js"],"names":["React","useState","DragDropContext","Draggable","Droppable","set","StateCreator","App","lines","setLines","creatorVisibility","setCreatorVisibility","State","props","state","style","backgroundColor","color","height","width","length","borderRadius","id","Grid","states","light","gridStates","map","index","provided","innerRef","draggableProps","dragHandleProps","name","Light","display","justifyContent","alignItems","Line","borderBottom","gridStyle","droppableProps","placeholder","LineStack","onDragEnd","result","destination","source","draggableId","droppableId","type","newLines","startingLine","find","endingLine","draggedState","splice","draggedLine"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\nimport { set } from './data'\nimport StateCreator from './StateCreator.jsx'\nimport './App.css'\n\n\nfunction App() {\n\n  let [lines, setLines] = useState([...set])\n  let [creatorVisibility, setCreatorVisibility] = useState('none');\n  \n  const State = (props) => {\n\n    const state = props.state\n\n    const style = {\n      backgroundColor: `${state.color}`,\n      height: '100px',\n      width: `${state.length * 100}px`,\n      borderRadius: '5px'\n    }\n\n    return (\n      <div key={state.id} style={style}></div>\n    )\n\n  }\n\n  const Grid = (props) => {\n\n    let states = props.light.gridStates\n\n    return states.map((state,index) => {\n\n      return (\n\n        <Draggable key={`${state.id}-${props.light.name}`} draggableId={state.id} index={index} type=\"STATE\">\n          {(provided)=>(\n            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className=\"draggable-state\">\n              <State key={state.id} state={state}/>\n            </div>\n          )}\n        </Draggable>\n      )\n\n    })\n\n  }\n\n  const Light = (props) => {\n\n    const light = props.light\n\n    const style = {\n      width: '100px',\n      height: '100px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      color: 'white',\n\n    }\n\n    return (\n      <div style={style} key={light.id}>\n        <h3>{light.name}</h3>\n      </div>\n    )\n\n  }\n\n  const Line = (props) => {\n\n    const style = {\n      display: 'flex',\n      borderBottom: '1px solid #2f2f2f',\n      backgroundColor: '#222'\n    }\n\n    const gridStyle = {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      width: '100%'\n    }\n\n    return (\n      <div style={style} >\n        <Light light={props.light}/>\n        <Droppable droppableId={props.light.id} direction=\"horizontal\" type=\"STATE\">\n        {(provided) => (\n          <div style={gridStyle} ref={provided.innerRef} {...provided.droppableProps}>\n            <Grid light={props.light}/>\n            {provided.placeholder}\n          </div>\n        )}\n        </Droppable>\n      </div>\n    )\n\n  }\n\n  const LineStack = () => {\n\n    return lines.map((light, index) => {\n\n      return (\n        <Draggable key={light.name} draggableId={light.id} index={index}>\n          {(provided) => (\n            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n              <Line key={light.name} light={light}/>\n            </div>\n          )}\n        </Draggable>\n\n      )\n\n    })\n\n\n  }\n\n\n  const onDragEnd = (result) => {\n\n    \n\n    const {destination, source, draggableId} = result;\n\n    if(!destination) {\n      return;\n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    if(source.droppableId === \"viewer\") {\n      return;\n    }\n\n    \n    if(result.type === \"STATE\") {\n      \n      const newLines = [...lines];\n\n      const startingLine = newLines.find(light => light.id === source.droppableId);\n      const endingLine = newLines.find(light => light.id === destination.droppableId);\n\n      const draggedState = startingLine.gridStates.find(state => state.id === draggableId)\n\n      startingLine.gridStates.splice(source.index, 1);\n      endingLine.gridStates.splice(destination.index, 0, draggedState);\n\n      setLines([...newLines])\n      \n    } else if (result.type === \"LINE\") {\n\n      const newLines = [...lines]\n\n      const draggedLine = newLines.splice(source.index, 1)[0];\n      newLines.splice(destination.index, 0, draggedLine);\n      \n      setLines([...newLines]);\n      \n      \n    }\n  \n  }\n\n\n  return (\n    <div className=\"App\">\n    <DragDropContext onDragEnd={onDragEnd}>\n      \n      <StateCreator/>\n\n      <Droppable droppableId=\"linestack\" type=\"LINE\">\n      {(provided) => (\n        <div ref={provided.innerRef} {...provided.droppableProps}>\n          <LineStack/>\n          {provided.placeholder}\n        </div>\n      )}\n      </Droppable>\n\n    </DragDropContext>\n      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}