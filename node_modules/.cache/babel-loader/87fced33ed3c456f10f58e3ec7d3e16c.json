{"ast":null,"code":"/**\n * Parses each row in the arp table into { name, ip, mac } on linux.\n *\n * partially inspired by https://github.com/goliatone/arpscan/blob/master/lib/arpscanner.js\n */\nmodule.exports = function parseLinux(row, servers, parseOne) {\n  var result = {}; // Ignore unresolved hosts.\n\n  if (row === '' || row.indexOf('incomplete') >= 0) {\n    return;\n  }\n\n  var chunks = row.split(' ').filter(Boolean);\n\n  if (parseOne) {\n    result = prepareOne(chunks);\n  } else {\n    result = prepareAll(chunks);\n  } // Only resolve external ips.\n\n\n  if (!~servers.indexOf(result.ip)) {\n    return;\n  }\n\n  return result;\n};\n\nfunction prepareOne(chunks) {\n  return {\n    name: '?',\n    // a hostname is not provided on the raspberry pi (linux)\n    ip: chunks[0],\n    mac: chunks[2]\n  };\n}\n\nfunction prepareAll(chunks) {\n  return {\n    name: chunks[0],\n    ip: chunks[1].match(/\\((.*)\\)/)[1],\n    mac: chunks[3]\n  };\n}","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/node_modules/local-devices/src/parser/linux.js"],"names":["module","exports","parseLinux","row","servers","parseOne","result","indexOf","chunks","split","filter","Boolean","prepareOne","prepareAll","ip","name","mac","match"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAmCC,QAAnC,EAA6C;AAC5D,MAAIC,MAAM,GAAG,EAAb,CAD4D,CAG5D;;AACA,MAAIH,GAAG,KAAK,EAAR,IAAcA,GAAG,CAACI,OAAJ,CAAY,YAAZ,KAA6B,CAA/C,EAAkD;AAChD;AACD;;AAED,MAAIC,MAAM,GAAGL,GAAG,CAACM,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsBC,OAAtB,CAAb;;AACA,MAAIN,QAAJ,EAAc;AACZC,IAAAA,MAAM,GAAGM,UAAU,CAACJ,MAAD,CAAnB;AACD,GAFD,MAEO;AACLF,IAAAA,MAAM,GAAGO,UAAU,CAACL,MAAD,CAAnB;AACD,GAb2D,CAe5D;;;AACA,MAAI,CAAC,CAACJ,OAAO,CAACG,OAAR,CAAgBD,MAAM,CAACQ,EAAvB,CAAN,EAAkC;AAChC;AACD;;AAED,SAAOR,MAAP;AACD,CArBD;;AAuBA,SAASM,UAAT,CAAqBJ,MAArB,EAA6B;AAC3B,SAAO;AACLO,IAAAA,IAAI,EAAE,GADD;AACM;AACXD,IAAAA,EAAE,EAAEN,MAAM,CAAC,CAAD,CAFL;AAGLQ,IAAAA,GAAG,EAAER,MAAM,CAAC,CAAD;AAHN,GAAP;AAKD;;AAED,SAASK,UAAT,CAAqBL,MAArB,EAA6B;AAC3B,SAAO;AACLO,IAAAA,IAAI,EAAEP,MAAM,CAAC,CAAD,CADP;AAELM,IAAAA,EAAE,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUS,KAAV,CAAgB,UAAhB,EAA4B,CAA5B,CAFC;AAGLD,IAAAA,GAAG,EAAER,MAAM,CAAC,CAAD;AAHN,GAAP;AAKD","sourcesContent":["/**\n * Parses each row in the arp table into { name, ip, mac } on linux.\n *\n * partially inspired by https://github.com/goliatone/arpscan/blob/master/lib/arpscanner.js\n */\nmodule.exports = function parseLinux (row, servers, parseOne) {\n  var result = {}\n\n  // Ignore unresolved hosts.\n  if (row === '' || row.indexOf('incomplete') >= 0) {\n    return\n  }\n\n  var chunks = row.split(' ').filter(Boolean)\n  if (parseOne) {\n    result = prepareOne(chunks)\n  } else {\n    result = prepareAll(chunks)\n  }\n\n  // Only resolve external ips.\n  if (!~servers.indexOf(result.ip)) {\n    return\n  }\n\n  return result\n}\n\nfunction prepareOne (chunks) {\n  return {\n    name: '?', // a hostname is not provided on the raspberry pi (linux)\n    ip: chunks[0],\n    mac: chunks[2]\n  }\n}\n\nfunction prepareAll (chunks) {\n  return {\n    name: chunks[0],\n    ip: chunks[1].match(/\\((.*)\\)/)[1],\n    mac: chunks[3]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}