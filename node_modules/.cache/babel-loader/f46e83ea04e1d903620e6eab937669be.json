{"ast":null,"code":"const ip = require('ip');\n\nconst ipAddress = require('ip-address');\n\nconst {\n  cidrv4,\n  cidrv6\n} = require('cidr-regex');\n\nconst errorMessage = new Error('IP supplied is not valid');\n\nconst getRangev4 = (ip1, ip2) => {\n  const ips = [];\n  let firstAddressLong = ip.toLong(ip1);\n  const lastAddressLong = ip.toLong(ip2);\n\n  for (firstAddressLong; firstAddressLong <= lastAddressLong; firstAddressLong++) ips.push(ip.fromLong(firstAddressLong));\n\n  return ips;\n};\n\nconst getRangev6 = (ip1, ip2) => {\n  const ips = [];\n  const firstAddress = new ipAddress.Address6(ip1);\n  const lastAddress = new ipAddress.Address6(ip2);\n\n  for (let i = firstAddress.bigInteger(); i <= lastAddress.bigInteger(); i++) {\n    ips.push(ipAddress.Address6.fromBigInteger(i).correctForm());\n  }\n\n  return ips;\n};\n\nconst isCIDR = ip => {\n  return ip.indexOf('/') !== -1;\n};\n\nconst isRange = ip => {\n  return ip.indexOf('-') !== -1;\n};\n\nconst convert = (cidrIp, ip2) => {\n  const ip1v4 = new ipAddress.Address4(cidrIp);\n  const ip1v6 = new ipAddress.Address6(cidrIp);\n\n  if (ip2) {\n    const ip2v4 = new ipAddress.Address4(ip2);\n    const ip2v6 = new ipAddress.Address6(ip2);\n\n    if (ip1v4.valid && ip2v4.valid && !isCIDR(cidrIp) && !isCIDR(ip2)) {\n      return getRangev4(cidrIp, ip2);\n    }\n\n    if (ip1v6.valid && ip2v6.valid) {\n      return getRangev6(cidrIp, ip2);\n    }\n  } else {\n    if (ip1v4.valid) {\n      const subnet = ip.cidrSubnet(cidrIp);\n      const firstAddress = subnet.firstAddress;\n      const lastAddress = subnet.lastAddress;\n      return getRangev4(firstAddress, lastAddress);\n    }\n\n    if (ip1v6.valid) {\n      const IPv6 = new ipAddress.Address6(cidrIp);\n      return getRangev6(IPv6.startAddress().correctForm(), IPv6.endAddress().correctForm());\n    }\n\n    if (isRange(cidrIp)) {\n      const [firstAddress, lastAddress] = cidrIp.split('-');\n      return convert(firstAddress, lastAddress);\n    }\n  }\n\n  throw errorMessage;\n};\n\nmodule.exports = convert;","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/node_modules/get-ip-range/index.js"],"names":["ip","require","ipAddress","cidrv4","cidrv6","errorMessage","Error","getRangev4","ip1","ip2","ips","firstAddressLong","toLong","lastAddressLong","push","fromLong","getRangev6","firstAddress","Address6","lastAddress","i","bigInteger","fromBigInteger","correctForm","isCIDR","indexOf","isRange","convert","cidrIp","ip1v4","Address4","ip1v6","ip2v4","ip2v6","valid","subnet","cidrSubnet","IPv6","startAddress","endAddress","split","module","exports"],"mappings":"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","sourcesContent":["const ip = require('ip');\nconst ipAddress = require('ip-address')\nconst { cidrv4, cidrv6 } = require('cidr-regex');\n\nconst errorMessage = new Error('IP supplied is not valid');\n\nconst getRangev4 = (ip1, ip2) => {\n  const ips = [];\n\n  let firstAddressLong = ip.toLong(ip1);\n  const lastAddressLong = ip.toLong(ip2);\n\n  for (firstAddressLong; firstAddressLong <= lastAddressLong; firstAddressLong++)\n    ips.push(ip.fromLong(firstAddressLong));\n\n  return ips;\n}\n\nconst getRangev6 = (ip1, ip2) => {\n  const ips = [];\n\n  const firstAddress = new ipAddress.Address6(ip1);\n  const lastAddress = new ipAddress.Address6(ip2);\n\n  for (let i = firstAddress.bigInteger(); i <= lastAddress.bigInteger(); i++) {\n    ips.push(ipAddress.Address6.fromBigInteger(i).correctForm());\n  }\n\n  return ips;\n}\n\nconst isCIDR = ip => {\n  return ip.indexOf('/') !== -1\n}\n\nconst isRange = ip => {\n  return ip.indexOf('-') !== -1\n}\n\nconst convert = (cidrIp, ip2) => {\n  const ip1v4 = new ipAddress.Address4(cidrIp);\n  const ip1v6 = new ipAddress.Address6(cidrIp);\n\n  if (ip2) {\n    const ip2v4 = new ipAddress.Address4(ip2);\n    const ip2v6 = new ipAddress.Address6(ip2);\n\n    if (ip1v4.valid && ip2v4.valid && !isCIDR(cidrIp) && !isCIDR(ip2)) {\n      return getRangev4(cidrIp, ip2);\n    }\n\n    if (ip1v6.valid && ip2v6.valid) {\n      return getRangev6(cidrIp, ip2);\n    }\n  } else {\n    if (ip1v4.valid) {\n      const subnet = ip.cidrSubnet(cidrIp);\n\n      const firstAddress = subnet.firstAddress;\n      const lastAddress = subnet.lastAddress;\n\n      return getRangev4(firstAddress, lastAddress);\n    }\n\n    if (ip1v6.valid) {\n      const IPv6 = new ipAddress.Address6(cidrIp);\n      return getRangev6(IPv6.startAddress().correctForm(), IPv6.endAddress().correctForm());\n    }\n\n    if (isRange(cidrIp)) {\n      const [ firstAddress, lastAddress ] = cidrIp.split('-');\n      return convert(firstAddress, lastAddress);\n    }\n  }\n\n  throw errorMessage;\n}\n\nmodule.exports = convert;\n"]},"metadata":{},"sourceType":"script"}