{"ast":null,"code":"/**\n * Parses each row in the arp table into { name, ip, mac } on win32.\n */\nmodule.exports = function parseRow(row, servers) {\n  var chunks = row.split(/\\s+/g).filter(function (el) {\n    return el.length > 1;\n  }); // Parse name.\n\n  var ipAddress = chunks[0]; // Only resolve external ips.\n\n  if (!~servers.indexOf(ipAddress)) {\n    return;\n  } // Parse mac\n\n\n  var macAddress = chunks[1].replace(/-/g, ':'); // Ignore unresolved hosts.\n\n  if (macAddress === '(incomplete)') {\n    return;\n  }\n\n  return {\n    name: '?',\n    // unresolved\n    ip: ipAddress,\n    mac: macAddress\n  };\n};","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/node_modules/local-devices/src/parser/win32.js"],"names":["module","exports","parseRow","row","servers","chunks","split","filter","el","length","ipAddress","indexOf","macAddress","replace","name","ip","mac"],"mappings":"AAAA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AAChD,MAAIC,MAAM,GAAGF,GAAG,CAACG,KAAJ,CAAU,MAAV,EAAkBC,MAAlB,CAAyB,UAAUC,EAAV,EAAc;AAAE,WAAOA,EAAE,CAACC,MAAH,GAAY,CAAnB;AAAsB,GAA/D,CAAb,CADgD,CAGhD;;AACA,MAAIC,SAAS,GAAGL,MAAM,CAAC,CAAD,CAAtB,CAJgD,CAKhD;;AACA,MAAI,CAAC,CAACD,OAAO,CAACO,OAAR,CAAgBD,SAAhB,CAAN,EAAkC;AAChC;AACD,GAR+C,CAUhD;;;AACA,MAAIE,UAAU,GAAGP,MAAM,CAAC,CAAD,CAAN,CAAUQ,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,CAAjB,CAXgD,CAYhD;;AACA,MAAID,UAAU,KAAK,cAAnB,EAAmC;AACjC;AACD;;AAED,SAAO;AACLE,IAAAA,IAAI,EAAE,GADD;AACM;AACXC,IAAAA,EAAE,EAAEL,SAFC;AAGLM,IAAAA,GAAG,EAAEJ;AAHA,GAAP;AAKD,CAtBD","sourcesContent":["/**\n * Parses each row in the arp table into { name, ip, mac } on win32.\n */\nmodule.exports = function parseRow (row, servers) {\n  var chunks = row.split(/\\s+/g).filter(function (el) { return el.length > 1 })\n\n  // Parse name.\n  var ipAddress = chunks[0]\n  // Only resolve external ips.\n  if (!~servers.indexOf(ipAddress)) {\n    return\n  }\n\n  // Parse mac\n  var macAddress = chunks[1].replace(/-/g, ':')\n  // Ignore unresolved hosts.\n  if (macAddress === '(incomplete)') {\n    return\n  }\n\n  return {\n    name: '?', // unresolved\n    ip: ipAddress,\n    mac: macAddress\n  }\n}\n"]},"metadata":{},"sourceType":"script"}