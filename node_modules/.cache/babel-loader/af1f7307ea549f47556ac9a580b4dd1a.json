{"ast":null,"code":"import axios from 'axios';\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\n\nconst getBridgeIP = () => {\n  let bridgeRequest = new Promise((resolve, reject) => {\n    axios.get('https://discovery.meethue.com').then(res => {\n      resolve(res.data[0].internalipaddress);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n  return bridgeRequest;\n};\n\nconst connectToBridge = (ip, user) => {\n  if (user) {\n    axios.get(`http://${ip}/api/${user}`).then(res => {\n      console.log(res);\n    });\n  } else {\n    createUser(ip).then(res => {\n      axios.get(`http://${ip}/api/${res}`).then(res => {\n        console.log(res);\n      });\n    });\n  }\n};\n\nconst createUser = ip => {\n  let request = new Promise((resolve, reject) => {\n    let requestsMade = 0;\n    let bridgeRequest = setInterval(() => {\n      axios.post(`http://${ip}/api`, {\n        devicetype: \"hue-stage-wep-app\"\n      }).then(res => {\n        if (!res.data[0].error) {\n          resolve(res.data[0].success.username);\n          requestsMade += 1;\n          clearInterval(bridgeRequest);\n        } else {\n          console.log(res.data[0].error);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n\n      if (requestsMade > 15) {\n        reject('Unable to create user');\n        clearInterval(bridgeRequest);\n      }\n    }, 2000);\n  });\n  return request;\n}; // coefficient 182.041667\n// 0 && 65535 red\n// 21845 green\n// 43690 blue\n\n\nexport const bridge = {\n  connect() {\n    getBridgeIP().then(ip => {\n      connectToBridge(ip, bridgeUser);\n    });\n    console.log(\"connected\");\n  }\n\n};","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/bridge.js"],"names":["axios","bridgeUser","getBridgeIP","bridgeRequest","Promise","resolve","reject","get","then","res","data","internalipaddress","catch","err","connectToBridge","ip","user","console","log","createUser","request","requestsMade","setInterval","post","devicetype","error","success","username","clearInterval","bridge","connect"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,UAAU,GAAG,0CAAjB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAEtB,MAAIC,aAAa,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEjDN,IAAAA,KAAK,CAACO,GAAN,CAAU,+BAAV,EAA2CC,IAA3C,CAAgDC,GAAG,IAAI;AACnDJ,MAAAA,OAAO,CAACI,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,iBAAb,CAAP;AACH,KAFD,EAEGC,KAFH,CAESC,GAAG,IAAI;AACZP,MAAAA,MAAM,CAACO,GAAD,CAAN;AACH,KAJD;AAKH,GAPmB,CAApB;AASA,SAAOV,aAAP;AACH,CAZD;;AAcA,MAAMW,eAAe,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc;AACpC,MAAGA,IAAH,EAAS;AACLhB,IAAAA,KAAK,CAACO,GAAN,CAAW,UAASQ,EAAG,QAAOC,IAAK,EAAnC,EAAsCR,IAAtC,CAA2CC,GAAG,IAAI;AACjDQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACA,KAFD;AAGH,GAJD,MAIO;AACHU,IAAAA,UAAU,CAACJ,EAAD,CAAV,CAAeP,IAAf,CAAoBC,GAAG,IAAI;AACzBT,MAAAA,KAAK,CAACO,GAAN,CAAW,UAASQ,EAAG,QAAON,GAAI,EAAlC,EAAqCD,IAArC,CAA0CC,GAAG,IAAI;AAC/CQ,QAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACD,OAFD;AAGD,KAJD;AAKH;AACF,CAZD;;AAcA,MAAMU,UAAU,GAAIJ,EAAD,IAAQ;AAEzB,MAAIK,OAAO,GAAG,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAE7C,QAAIe,YAAY,GAAG,CAAnB;AAEA,QAAIlB,aAAa,GAAGmB,WAAW,CAAC,MAAI;AAClCtB,MAAAA,KAAK,CAACuB,IAAN,CAAY,UAASR,EAAG,MAAxB,EAA+B;AAACS,QAAAA,UAAU,EAAE;AAAb,OAA/B,EACGhB,IADH,CACQC,GAAG,IAAI;AACX,YAAI,CAACA,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYe,KAAjB,EAAwB;AACtBpB,UAAAA,OAAO,CAACI,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYgB,OAAZ,CAAoBC,QAArB,CAAP;AACAN,UAAAA,YAAY,IAAI,CAAhB;AACAO,UAAAA,aAAa,CAACzB,aAAD,CAAb;AACD,SAJD,MAIO;AACLc,UAAAA,OAAO,CAACC,GAAR,CAAYT,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYe,KAAxB;AACD;AACJ,OATD,EASGb,KATH,CASSC,GAAG,IAAI;AACdI,QAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACD,OAXD;;AAaA,UAAGQ,YAAY,GAAG,EAAlB,EAAsB;AACpBf,QAAAA,MAAM,CAAC,uBAAD,CAAN;AACAsB,QAAAA,aAAa,CAACzB,aAAD,CAAb;AACD;AAEF,KAnB8B,EAmB5B,IAnB4B,CAA/B;AAqBD,GAzBa,CAAd;AA2BA,SAAOiB,OAAP;AAED,CA/BD,C,CAiCA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMS,MAAM,GAAG;AAClBC,EAAAA,OAAO,GAAG;AACN5B,IAAAA,WAAW,GAAGM,IAAd,CAAmBO,EAAE,IAAI;AACrBD,MAAAA,eAAe,CAACC,EAAD,EAAKd,UAAL,CAAf;AACH,KAFD;AAGAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;AANiB,CAAf","sourcesContent":["import axios from 'axios';\n\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\n\nconst getBridgeIP = () => {\n\n    let bridgeRequest = new Promise((resolve, reject) => {\n\n        axios.get('https://discovery.meethue.com').then(res => {\n            resolve(res.data[0].internalipaddress)\n        }).catch(err => {\n            reject(err)\n        })\n    })  \n\n    return bridgeRequest;\n}\n\nconst connectToBridge = (ip, user) => {\n  if(user) {\n      axios.get(`http://${ip}/api/${user}`).then(res => {\n       console.log(res);\n      })\n  } else {\n      createUser(ip).then(res => {\n        axios.get(`http://${ip}/api/${res}`).then(res => {\n          console.log(res);\n        })\n      });\n  }\n}\n\nconst createUser = (ip) => {\n  \n  let request = new Promise((resolve, reject) => {\n\n    let requestsMade = 0;\n    \n    let bridgeRequest = setInterval(()=>{\n      axios.post(`http://${ip}/api`, {devicetype: \"hue-stage-wep-app\"})\n        .then(res => {\n          if (!res.data[0].error) {\n            resolve(res.data[0].success.username);\n            requestsMade += 1;\n            clearInterval(bridgeRequest);\n          } else {\n            console.log(res.data[0].error)\n          }\n      }).catch(err => {\n        console.log(err);\n      })\n  \n      if(requestsMade > 15) {\n        reject('Unable to create user')\n        clearInterval(bridgeRequest);\n      }\n      \n    }, 2000);\n\n  })\n\n  return request;\n\n}\n\n// coefficient 182.041667\n// 0 && 65535 red\n// 21845 green\n// 43690 blue\n\n\nexport const bridge = {\n    connect() {\n        getBridgeIP().then(ip => {\n            connectToBridge(ip, bridgeUser)\n        })\n        console.log(\"connected\")\n    }\n}\n"]},"metadata":{},"sourceType":"module"}