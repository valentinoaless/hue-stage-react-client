{"ast":null,"code":"import axios from 'axios';\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\n\nconst getBridgeIP = () => {\n  let ip = axios.get('https://discovery.meethue.com').then(res => {\n    return res.data[0].internalipaddress;\n  }); // console.log(ip)\n  // let bridgeRequest = new Promise((resolve, reject) => {\n  //     axios.get('https://discovery.meethue.com').then(res => {\n  //         console.log('getting ip')\n  //         resolve(res.data[0].internalipaddress)\n  //     }).catch(err => {\n  //         reject(err)\n  //     })\n  // })  \n\n  return ip;\n};\n\nconst connectToBridge = (ip, user) => {\n  if (user) {\n    axios.get(`http://${ip}/api/${user}`).then(res => {\n      console.log(res);\n    });\n  } else {\n    createUser(ip).then(res => {\n      axios.get(`http://${ip}/api/${res}`).then(res => {\n        console.log(res);\n      });\n    });\n  }\n};\n\nconst createUser = ip => {\n  let request = new Promise((resolve, reject) => {\n    let requestsMade = 0;\n    let bridgeRequest = setInterval(() => {\n      axios.post(`http://${ip}/api`, {\n        devicetype: \"hue-stage-wep-app\"\n      }).then(res => {\n        if (!res.data[0].error) {\n          resolve(res.data[0].success.username);\n          requestsMade += 1;\n          clearInterval(bridgeRequest);\n        } else {\n          console.log(res.data[0].error);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n\n      if (requestsMade > 15) {\n        reject('Unable to create user');\n        clearInterval(bridgeRequest);\n      }\n    }, 2000);\n  });\n  return request;\n}; // coefficient 182.041667\n// 0 && 65535 red\n// 21845 green\n// 43690 blue\n\n\nexport const bridge = {\n  connect() {\n    getBridgeIP().then(ip => {\n      connectToBridge(ip, bridgeUser);\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/bridge.js"],"names":["axios","bridgeUser","getBridgeIP","ip","get","then","res","data","internalipaddress","connectToBridge","user","console","log","createUser","request","Promise","resolve","reject","requestsMade","bridgeRequest","setInterval","post","devicetype","error","success","username","clearInterval","catch","err","bridge","connect"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,UAAU,GAAG,0CAAjB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAEtB,MAAIC,EAAE,GAAGH,KAAK,CAACI,GAAN,CAAU,+BAAV,EAA2CC,IAA3C,CAAgDC,GAAG,IAAI;AAC5D,WAAOA,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYC,iBAAnB;AACH,GAFQ,CAAT,CAFsB,CAMtB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOL,EAAP;AACH,CAnBD;;AAqBA,MAAMM,eAAe,GAAG,CAACN,EAAD,EAAKO,IAAL,KAAc;AACpC,MAAGA,IAAH,EAAS;AACLV,IAAAA,KAAK,CAACI,GAAN,CAAW,UAASD,EAAG,QAAOO,IAAK,EAAnC,EAAsCL,IAAtC,CAA2CC,GAAG,IAAI;AACjDK,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACA,KAFD;AAGH,GAJD,MAIO;AACHO,IAAAA,UAAU,CAACV,EAAD,CAAV,CAAeE,IAAf,CAAoBC,GAAG,IAAI;AACzBN,MAAAA,KAAK,CAACI,GAAN,CAAW,UAASD,EAAG,QAAOG,GAAI,EAAlC,EAAqCD,IAArC,CAA0CC,GAAG,IAAI;AAC/CK,QAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACD,OAFD;AAGD,KAJD;AAKH;AACF,CAZD;;AAcA,MAAMO,UAAU,GAAIV,EAAD,IAAQ;AAEzB,MAAIW,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAE7C,QAAIC,YAAY,GAAG,CAAnB;AAEA,QAAIC,aAAa,GAAGC,WAAW,CAAC,MAAI;AAClCpB,MAAAA,KAAK,CAACqB,IAAN,CAAY,UAASlB,EAAG,MAAxB,EAA+B;AAACmB,QAAAA,UAAU,EAAE;AAAb,OAA/B,EACGjB,IADH,CACQC,GAAG,IAAI;AACX,YAAI,CAACA,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYgB,KAAjB,EAAwB;AACtBP,UAAAA,OAAO,CAACV,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYiB,OAAZ,CAAoBC,QAArB,CAAP;AACAP,UAAAA,YAAY,IAAI,CAAhB;AACAQ,UAAAA,aAAa,CAACP,aAAD,CAAb;AACD,SAJD,MAIO;AACLR,UAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAYgB,KAAxB;AACD;AACJ,OATD,EASGI,KATH,CASSC,GAAG,IAAI;AACdjB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACD,OAXD;;AAaA,UAAGV,YAAY,GAAG,EAAlB,EAAsB;AACpBD,QAAAA,MAAM,CAAC,uBAAD,CAAN;AACAS,QAAAA,aAAa,CAACP,aAAD,CAAb;AACD;AAEF,KAnB8B,EAmB5B,IAnB4B,CAA/B;AAqBD,GAzBa,CAAd;AA2BA,SAAOL,OAAP;AAED,CA/BD,C,CAiCA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMe,MAAM,GAAG;AAClBC,EAAAA,OAAO,GAAG;AACN5B,IAAAA,WAAW,GAAGG,IAAd,CAAmBF,EAAE,IAAI;AACrBM,MAAAA,eAAe,CAACN,EAAD,EAAKF,UAAL,CAAf;AACH,KAFD;AAGH;;AALiB,CAAf","sourcesContent":["import axios from 'axios';\n\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\n\nconst getBridgeIP = () => {\n\n    let ip = axios.get('https://discovery.meethue.com').then(res => {\n        return res.data[0].internalipaddress\n    })\n\n    // console.log(ip)\n\n    // let bridgeRequest = new Promise((resolve, reject) => {\n        \n    //     axios.get('https://discovery.meethue.com').then(res => {\n    //         console.log('getting ip')\n    //         resolve(res.data[0].internalipaddress)\n    //     }).catch(err => {\n    //         reject(err)\n    //     })\n    // })  \n\n    return ip;\n}\n\nconst connectToBridge = (ip, user) => {\n  if(user) {\n      axios.get(`http://${ip}/api/${user}`).then(res => {\n       console.log(res);\n      })\n  } else {\n      createUser(ip).then(res => {\n        axios.get(`http://${ip}/api/${res}`).then(res => {\n          console.log(res);\n        })\n      });\n  }\n}\n\nconst createUser = (ip) => {\n  \n  let request = new Promise((resolve, reject) => {\n\n    let requestsMade = 0;\n    \n    let bridgeRequest = setInterval(()=>{\n      axios.post(`http://${ip}/api`, {devicetype: \"hue-stage-wep-app\"})\n        .then(res => {\n          if (!res.data[0].error) {\n            resolve(res.data[0].success.username);\n            requestsMade += 1;\n            clearInterval(bridgeRequest);\n          } else {\n            console.log(res.data[0].error)\n          }\n      }).catch(err => {\n        console.log(err);\n      })\n  \n      if(requestsMade > 15) {\n        reject('Unable to create user')\n        clearInterval(bridgeRequest);\n      }\n      \n    }, 2000);\n\n  })\n\n  return request;\n\n}\n\n// coefficient 182.041667\n// 0 && 65535 red\n// 21845 green\n// 43690 blue\n\n\nexport const bridge = {\n    connect() {\n        getBridgeIP().then(ip => {\n            connectToBridge(ip, bridgeUser)\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}