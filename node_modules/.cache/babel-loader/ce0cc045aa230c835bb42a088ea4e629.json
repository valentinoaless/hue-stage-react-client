{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/set-controls.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { set } from './data'; // play button\n// pause button\n// tempo\n// i.e. tempo = 140, beat happens at second measure (4 beats)\n// 1 measure has x beats\n// measure length in ms = /\n// tempo == beats in 60s\n\nlet tempo = 120;\nlet beatsPerMeasure = 4;\nlet beatValue = 4; // 1/4 (quarter)\n// get current time and every 50 ms check what objects have a play time before current time\n\nlet message = {\n  atTime: 1,\n  states: [{}, {}]\n};\nlet messages = []; // after copying state and sending, delete those objects from the play time\n// render all states \n// when rendering states, make an array with objects\n// each object will have two properties, playTime and an array of all the states\n//disable all controls and dnd interface\n\n/*\n\n\n*/\n\nconst SetControls = () => {\n  _s();\n\n  let [playing, setPlaying] = useState(false);\n\n  const play = () => {\n    if (!playing) {\n      let initialTime = new Date().getTime();\n      console.log(initialTime);\n    }\n\n    setPlaying(!playing);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Controls, {\n    children: /*#__PURE__*/_jsxDEV(Play, {\n      playing: playing,\n      onClick: play\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SetControls, \"TknKTnbLvtkeUADVhXhEVXKXunU=\");\n\n_c = SetControls;\nexport default SetControls;\nconst Controls = styled.div`\n    color: white; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n_c2 = Controls;\nconst Play = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    transform: rotate(45deg);\n    cursor: pointer;\n    background-color: ${props => props.playing ? 'green' : 'white'};\n    :hover {\n        background-color: darkgreen;\n    }\n`;\n_c3 = Play;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SetControls\");\n$RefreshReg$(_c2, \"Controls\");\n$RefreshReg$(_c3, \"Play\");","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/set-controls.jsx"],"names":["React","useState","styled","set","tempo","beatsPerMeasure","beatValue","message","atTime","states","messages","SetControls","playing","setPlaying","play","initialTime","Date","getTime","console","log","Controls","div","Play","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,GAAT,QAAoB,QAApB,C,CAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AACA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,eAAe,GAAG,CAAtB;AACA,IAAIC,SAAS,GAAG,CAAhB,C,CAAmB;AAEnB;;AAEA,IAAIC,OAAO,GAAG;AACVC,EAAAA,MAAM,EAAE,CADE;AAEVC,EAAAA,MAAM,EAAE,CACJ,EADI,EAEJ,EAFI;AAFE,CAAd;AAQA,IAAIC,QAAQ,GAAG,EAAf,C,CAWA;AAGA;AACA;AACA;AAIA;;AAEA;AACA;AACA;AACA;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMa,IAAI,GAAG,MAAM;AAEf,QAAG,CAACF,OAAJ,EAAa;AACT,UAAIG,WAAW,GAAI,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAlB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACH;;AAEDF,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AAGH,GAVD;;AAaA,sBACI,QAAC,QAAD;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEA,OAAf;AAAwB,MAAA,OAAO,EAAEE;AAAjC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAtBD;;GAAMH,W;;KAAAA,W;AAwBN,eAAeA,WAAf;AAEA,MAAMS,QAAQ,GAAGlB,MAAM,CAACmB,GAAI;AAC5B;AACA;AACA;AACA;AACA,CALA;MAAMD,Q;AAON,MAAME,IAAI,GAAGpB,MAAM,CAACmB,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA,wBAAwBE,KAAK,IAAIA,KAAK,CAACX,OAAN,GAAgB,OAAhB,GAA0B,OAAS;AACpE;AACA;AACA;AACA,CAVA;MAAMU,I","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { set } from './data'\n\n// play button\n// pause button\n// tempo\n\n// i.e. tempo = 140, beat happens at second measure (4 beats)\n\n// 1 measure has x beats\n// measure length in ms = /\n\n// tempo == beats in 60s\nlet tempo = 120;\nlet beatsPerMeasure = 4;\nlet beatValue = 4; // 1/4 (quarter)\n\n// get current time and every 50 ms check what objects have a play time before current time\n\nlet message = {\n    atTime: 1,\n    states: [\n        {},\n        {}\n    ]\n}\n\nlet messages = []\n\n\n\n\n\n\n\n\n\n\n// after copying state and sending, delete those objects from the play time\n\n\n// render all states \n// when rendering states, make an array with objects\n// each object will have two properties, playTime and an array of all the states\n\n\n\n//disable all controls and dnd interface\n\n/*\n\n\n*/\n\n\nconst SetControls = () => {\n\n    let [playing, setPlaying] = useState(false);\n\n    const play = () => {\n\n        if(!playing) {\n            let initialTime = (new Date()).getTime();\n            console.log(initialTime);\n        }\n\n        setPlaying(!playing);\n\n    \n    }\n\n\n    return (\n        <Controls >\n            <Play playing={playing} onClick={play}/>\n        </Controls>\n    );\n};\n\nexport default SetControls;\n\nconst Controls = styled.div`\n    color: white; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Play = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    transform: rotate(45deg);\n    cursor: pointer;\n    background-color: ${props => props.playing ? 'green' : 'white' };\n    :hover {\n        background-color: darkgreen;\n    }\n`"]},"metadata":{},"sourceType":"module"}