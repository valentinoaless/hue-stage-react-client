{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/set-controls.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { set } from './data'; // play button\n// pause button\n// tempo\n// i.e. tempo = 140, beat happens at second measure (4 beats)\n// 1 measure has x beats\n// measure length in ms = /\n// tempo == beats in 60s\n\nlet tempo = 120;\nlet beatsPerMeasure = 4;\nlet beatValue = 4; // 1/4 (quarter)\n// get current time and every 50 ms check what objects have a play time before current time\n// after copying state and sending, delete those objects from the play time\n// render all states \n// when rendering states, make an array with objects\n// each object will have two properties, playTime and an array of all the states\n//disable all controls and dnd interface\n\n/*\n\n\n*/\n\nconst SetControls = () => {\n  _s();\n\n  let [playing, setPlaying] = useState(false);\n\n  const play = () => {\n    if (!playing) {\n      let initialTime = new Date().getTime();\n      let playerQueues = [];\n      set.map(light => {\n        let millisecondOcurrence = 0;\n        light.gridStates.map(state => {\n          let millisecondDuration = 60000 / tempo * beatsPerMeasure * state.duration;\n          playerQueues.push({\n            occurrenceTime: millisecondOcurrence,\n            state: state\n          });\n          millisecondOcurrence += millisecondDuration;\n        });\n      });\n      console.log(playerQueues);\n      let startTime = new Date();\n      let player = setInterval(() => {\n        console.log('ran');\n        let currentTime = new Date();\n        let elapsedTime = currentTime - startTime;\n        let queueCopy = [...playerQueues];\n        let messages = queueCopy.filter(state => {\n          return state.occurrenceTime <= elapsedTime;\n        });\n        console.log(messages);\n        playerQueues = queueCopy.filter(state => state.occurrenceTime > elapsedTime);\n        messages.map(message => {\n          console.log(message.state);\n        });\n\n        if (playerQueues.length === 0) {\n          clearInterval(player);\n        }\n      }, 50); // for every state in queue get millisecond occurence based on tempo\n    }\n\n    setPlaying(!playing);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Controls, {\n    children: /*#__PURE__*/_jsxDEV(Play, {\n      playing: playing,\n      onClick: play\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SetControls, \"TknKTnbLvtkeUADVhXhEVXKXunU=\");\n\n_c = SetControls;\nexport default SetControls;\nconst Controls = styled.div`\n    color: white; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n_c2 = Controls;\nconst Play = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    transform: rotate(45deg);\n    cursor: pointer;\n    background-color: ${props => props.playing ? 'green' : 'white'};\n    :hover {\n        background-color: darkgreen;\n    }\n`;\n_c3 = Play;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SetControls\");\n$RefreshReg$(_c2, \"Controls\");\n$RefreshReg$(_c3, \"Play\");","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/set-controls.jsx"],"names":["React","useState","styled","set","tempo","beatsPerMeasure","beatValue","SetControls","playing","setPlaying","play","initialTime","Date","getTime","playerQueues","map","light","millisecondOcurrence","gridStates","state","millisecondDuration","duration","push","occurrenceTime","console","log","startTime","player","setInterval","currentTime","elapsedTime","queueCopy","messages","filter","message","length","clearInterval","Controls","div","Play","props"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { set } from './data'\n\n// play button\n// pause button\n// tempo\n\n// i.e. tempo = 140, beat happens at second measure (4 beats)\n\n// 1 measure has x beats\n// measure length in ms = /\n\n// tempo == beats in 60s\nlet tempo = 120;\nlet beatsPerMeasure = 4;\nlet beatValue = 4; // 1/4 (quarter)\n\n// get current time and every 50 ms check what objects have a play time before current time\n\n// after copying state and sending, delete those objects from the play time\n\n\n// render all states \n// when rendering states, make an array with objects\n// each object will have two properties, playTime and an array of all the states\n\n\n\n//disable all controls and dnd interface\n\n/*\n\n\n*/\n\n\nconst SetControls = () => {\n\n    let [playing, setPlaying] = useState(false);\n\n    const play = () => {\n\n        if(!playing) {\n            let initialTime = (new Date()).getTime();\n        \n            let playerQueues = [];\n        \n            set.map(light => {\n\n                let millisecondOcurrence = 0;\n\n                light.gridStates.map(state => {\n\n                    let millisecondDuration = ((60000/tempo) * beatsPerMeasure) * state.duration\n                    \n                    playerQueues.push({\n                        occurrenceTime: millisecondOcurrence,\n                        state: state\n                    })\n                    \n                    millisecondOcurrence += millisecondDuration;\n\n                })\n\n            })\n\n            console.log(playerQueues)\n\n            let startTime = new Date()\n\n            let player = setInterval(()=>{\n\n                console.log('ran')\n\n                let currentTime = new Date()\n                let elapsedTime = currentTime - startTime;\n                let queueCopy = [...playerQueues]\n\n                let messages = queueCopy.filter(state => {\n                    return state.occurrenceTime <= elapsedTime\n                });\n\n                console.log(messages)\n\n                playerQueues = queueCopy.filter(state => state.occurrenceTime > elapsedTime );\n\n                messages.map(message => {\n                    console.log(message.state)\n                })\n\n                if(playerQueues.length === 0) {\n                    clearInterval(player);\n                }\n\n            }, 50)\n\n            \n\n\n\n\n            // for every state in queue get millisecond occurence based on tempo\n\n            \n\n            \n\n        }\n\n        setPlaying(!playing);\n\n        \n\n    \n    }\n\n\n    return (\n        <Controls >\n            <Play playing={playing} onClick={play}/>\n        </Controls>\n    );\n};\n\nexport default SetControls;\n\nconst Controls = styled.div`\n    color: white; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Play = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    transform: rotate(45deg);\n    cursor: pointer;\n    background-color: ${props => props.playing ? 'green' : 'white' };\n    :hover {\n        background-color: darkgreen;\n    }\n`"]},"metadata":{},"sourceType":"module"}