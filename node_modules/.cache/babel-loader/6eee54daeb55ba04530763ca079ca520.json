{"ast":null,"code":"import axios from 'axios';\nimport { set } from './data';\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\nlet bridgeIp = '';\n\nconst getBridgeIP = () => {\n  return axios.get('https://discovery.meethue.com').then(res => {\n    bridgeIp = res.data[0].internalipaddress;\n    return res.data[0].internalipaddress;\n  });\n};\n\nconst connectToBridge = (ip, user) => {\n  if (user) {\n    axios.get(`http://${ip}/api/${user}`).then(res => {});\n  } else {\n    createUser(ip).then(res => {\n      axios.get(`http://${ip}/api/${res}`).then(res => {\n        console.log(res);\n      });\n    });\n  }\n};\n\nconst createUser = ip => {\n  let request = new Promise((resolve, reject) => {\n    let requestsMade = 0;\n    let bridgeRequest = setInterval(() => {\n      axios.post(`http://${ip}/api`, {\n        devicetype: \"hue-stage-wep-app\"\n      }).then(res => {\n        if (!res.data[0].error) {\n          resolve(res.data[0].success.username);\n          requestsMade += 1;\n          clearInterval(bridgeRequest);\n        } else {\n          console.log(res.data[0].error);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n\n      if (requestsMade > 15) {\n        reject('Unable to create user');\n        clearInterval(bridgeRequest);\n      }\n    }, 2000);\n  });\n  return request;\n}; // coefficient 182.041667\n// 0 && 65535 red\n// 21845 green\n// 43690 blue\n\n\nexport const bridge = {\n  connect: async () => {\n    await getBridgeIP().then(ip => {\n      connectToBridge(ip, bridgeUser);\n    });\n  },\n\n  send(light, state) {\n    axios.put(`http://${bridgeIp}/api/${bridgeUser}/lights/${light}/state`, state).then(res => {\n      console.log(res);\n    });\n  },\n\n  getLights: async () => {\n    let reachableLights = [];\n    await axios.get(`http://${bridgeIp}/api/${bridgeUser}/lights/`).then(res => {\n      let lights = Object.entries(res.data);\n      lights.map(light => {\n        if (light[1].state.reachable) {\n          reachableLights.push(light);\n        }\n      });\n    });\n    return reachableLights;\n  },\n\n  loadLights() {\n    let reachableLights = [];\n    return this.getLights().then(res => {\n      reachableLights = res;\n      reachableLights.map(light => {\n        set.push({\n          bridgeIndex: light[0],\n          name: light[1].name,\n          id: light[1].uniqueid,\n          gridStates: []\n        });\n        return null;\n      });\n      return true;\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/bridge.js"],"names":["axios","set","bridgeUser","bridgeIp","getBridgeIP","get","then","res","data","internalipaddress","connectToBridge","ip","user","createUser","console","log","request","Promise","resolve","reject","requestsMade","bridgeRequest","setInterval","post","devicetype","error","success","username","clearInterval","catch","err","bridge","connect","send","light","state","put","getLights","reachableLights","lights","Object","entries","map","reachable","push","loadLights","bridgeIndex","name","id","uniqueid","gridStates"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { set } from './data'\n\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\nlet bridgeIp = '';\n\nconst getBridgeIP = () => {\n    return axios.get('https://discovery.meethue.com').then(res => {\n        bridgeIp = res.data[0].internalipaddress\n        return res.data[0].internalipaddress\n    })\n}\n\nconst connectToBridge = (ip, user) => {\n  if(user) {\n      axios.get(`http://${ip}/api/${user}`).then(res => {\n      })\n  } else {\n      createUser(ip).then(res => {\n        axios.get(`http://${ip}/api/${res}`).then(res => {\n          console.log(res);\n        })\n      });\n  }\n}\n\nconst createUser = (ip) => {\n\n  let request = new Promise((resolve, reject) => {\n\n    let requestsMade = 0;\n    \n    let bridgeRequest = setInterval(()=>{\n      axios.post(`http://${ip}/api`, {devicetype: \"hue-stage-wep-app\"})\n        .then(res => {\n          if (!res.data[0].error) {\n            resolve(res.data[0].success.username);\n            requestsMade += 1;\n            clearInterval(bridgeRequest);\n          } else {\n            console.log(res.data[0].error)\n          }\n      }).catch(err => {\n        console.log(err);\n      })\n  \n      if(requestsMade > 15) {\n        reject('Unable to create user')\n        clearInterval(bridgeRequest);\n      }\n      \n    }, 2000);\n\n  })\n\n  return request;\n\n}\n\n// coefficient 182.041667\n// 0 && 65535 red\n// 21845 green\n// 43690 blue\n\n\nexport const bridge = {\n    connect: async () => {\n        await getBridgeIP().then(ip => {\n            connectToBridge(ip, bridgeUser)\n        })\n    },\n\n    send(light, state) {\n        axios.put(`http://${bridgeIp}/api/${bridgeUser}/lights/${light}/state`, state)\n        .then(res => {\n            console.log(res);\n        })\n    },\n\n    getLights: async () => {\n\n        let reachableLights = [];\n\n        await axios.get(`http://${bridgeIp}/api/${bridgeUser}/lights/`).then(res => {\n\n            let lights = Object.entries(res.data);\n            lights.map(light => {\n                if(light[1].state.reachable) {\n                    reachableLights.push(light);\n                }\n            })\n        })\n        \n        \n        return reachableLights;\n    },\n\n    loadLights() {\n\n        let reachableLights = [] \n        return this.getLights().then(res => {\n            reachableLights = res;\n            reachableLights.map(light => {\n                set.push({\n                    bridgeIndex: light[0],\n                    name: light[1].name,\n                    id: light[1].uniqueid,\n                    gridStates: []\n                })\n                return null;\n            })\n            return true;\n        })\n\n        \n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}