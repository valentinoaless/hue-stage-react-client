{"ast":null,"code":"/**\n * Parses each row in the arp table into { name, ip, mac }.\n */\nmodule.exports = function parseRow(row, servers) {\n  // Parse name.\n  var nameStart = 0;\n  var nameEnd = row.indexOf('(') - 1;\n  var name = row.slice(nameStart, nameEnd); // Parse ip.\n\n  var ipStart = nameEnd + 2;\n  var ipEnd = row.indexOf(')', ipStart);\n  var ipAddress = row.slice(ipStart, ipEnd); // Only resolve external ips.\n\n  if (!~servers.indexOf(ipAddress)) {\n    return;\n  } // Parse mac\n\n\n  var macStart = row.indexOf(' at ', ipEnd) + 4;\n  var macEnd = row.indexOf(' on ', macStart);\n  var macAddress = row.slice(macStart, macEnd); // Ignore unresolved hosts.\n\n  if (macAddress === '(incomplete)') {\n    return;\n  } // Format for always 2 digits\n\n\n  macAddress = macAddress.replace(/^.:/, '0$&').replace(/:.(?=:|$)/g, ':0X$&').replace(/X:/g, '');\n  return {\n    name: name,\n    ip: ipAddress,\n    mac: macAddress\n  };\n};","map":{"version":3,"sources":["/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/node_modules/local-devices/src/parser/index.js"],"names":["module","exports","parseRow","row","servers","nameStart","nameEnd","indexOf","name","slice","ipStart","ipEnd","ipAddress","macStart","macEnd","macAddress","replace","ip","mac"],"mappings":"AAAA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AAChD;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,OAAO,GAAGH,GAAG,CAACI,OAAJ,CAAY,GAAZ,IAAmB,CAAjC;AACA,MAAIC,IAAI,GAAGL,GAAG,CAACM,KAAJ,CAAUJ,SAAV,EAAqBC,OAArB,CAAX,CAJgD,CAMhD;;AACA,MAAII,OAAO,GAAGJ,OAAO,GAAG,CAAxB;AACA,MAAIK,KAAK,GAAGR,GAAG,CAACI,OAAJ,CAAY,GAAZ,EAAiBG,OAAjB,CAAZ;AACA,MAAIE,SAAS,GAAGT,GAAG,CAACM,KAAJ,CAAUC,OAAV,EAAmBC,KAAnB,CAAhB,CATgD,CAUhD;;AACA,MAAI,CAAC,CAACP,OAAO,CAACG,OAAR,CAAgBK,SAAhB,CAAN,EAAkC;AAChC;AACD,GAb+C,CAehD;;;AACA,MAAIC,QAAQ,GAAGV,GAAG,CAACI,OAAJ,CAAY,MAAZ,EAAoBI,KAApB,IAA6B,CAA5C;AACA,MAAIG,MAAM,GAAGX,GAAG,CAACI,OAAJ,CAAY,MAAZ,EAAoBM,QAApB,CAAb;AACA,MAAIE,UAAU,GAAGZ,GAAG,CAACM,KAAJ,CAAUI,QAAV,EAAoBC,MAApB,CAAjB,CAlBgD,CAmBhD;;AACA,MAAIC,UAAU,KAAK,cAAnB,EAAmC;AACjC;AACD,GAtB+C,CAuBhD;;;AACAA,EAAAA,UAAU,GAAGA,UAAU,CACpBC,OADU,CACF,KADE,EACK,KADL,EAEVA,OAFU,CAEF,YAFE,EAEY,OAFZ,EAGVA,OAHU,CAGF,KAHE,EAGK,EAHL,CAAb;AAKA,SAAO;AACLR,IAAAA,IAAI,EAAEA,IADD;AAELS,IAAAA,EAAE,EAAEL,SAFC;AAGLM,IAAAA,GAAG,EAAEH;AAHA,GAAP;AAKD,CAlCD","sourcesContent":["/**\n * Parses each row in the arp table into { name, ip, mac }.\n */\nmodule.exports = function parseRow (row, servers) {\n  // Parse name.\n  var nameStart = 0\n  var nameEnd = row.indexOf('(') - 1\n  var name = row.slice(nameStart, nameEnd)\n\n  // Parse ip.\n  var ipStart = nameEnd + 2\n  var ipEnd = row.indexOf(')', ipStart)\n  var ipAddress = row.slice(ipStart, ipEnd)\n  // Only resolve external ips.\n  if (!~servers.indexOf(ipAddress)) {\n    return\n  }\n\n  // Parse mac\n  var macStart = row.indexOf(' at ', ipEnd) + 4\n  var macEnd = row.indexOf(' on ', macStart)\n  var macAddress = row.slice(macStart, macEnd)\n  // Ignore unresolved hosts.\n  if (macAddress === '(incomplete)') {\n    return\n  }\n  // Format for always 2 digits\n  macAddress = macAddress\n    .replace(/^.:/, '0$&')\n    .replace(/:.(?=:|$)/g, ':0X$&')\n    .replace(/X:/g, '')\n\n  return {\n    name: name,\n    ip: ipAddress,\n    mac: macAddress\n  }\n}\n"]},"metadata":{},"sourceType":"script"}